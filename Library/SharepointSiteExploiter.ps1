function SharepointSiteExploiter {
    param ($sharepoint_site)
    #Exploring site

    $sharepoint_site_name = $sharepoint_site.split("/")[-1]
    Write-Host "`nExploring sharepoint site: $sharepoint_site" @fg_yellow

    try {
        Connect-PnPOnline -Url $sharepoint_site -Credentials $global:AdminCredential 
    }
    catch {
        if ($_ -match "Forbidden"){
            Write-Host "`nI guess you can't get everything!`nThe current user DOES NOT have access to this sharepoint site. Try another site from the list or attempt to gain access to this site usinf module (4)." @fg_red
            return
        }
    }

    $sharepoint_site_options = @{0 = "Back to previous menu"; 1 = "Retrieve Sharepoint Groups in the current connected site"; 2 = "Retrieve all users from the User Information List of the current site collection"; 3 = "Retrieve users with rights assigned"; 4 = "Find and list folders in sharepoint site"; 5 = "Search files in sharepoint site"; 6 = "Dump all files from site";}
    
    do{ 
        Write-Host "`nSharepoint site options:" @fg_yellow
        Write-Host "You are currently exploring site: $sharepoint_site_name" @fg_gray

        OptionDisplay "Select Site Action:" $sharepoint_site_options

        #Take user choice
        while ($true) {
            try {
                Write-Host "`n"
                [int]$recon_user_choice = Read-Host -Prompt 'Choose a Sharepoint site option:'
                break
            }
            catch {
                Write-Host "Invalid input!!! Choose an option number from the list!"
            }
        }
        
        if ($recon_user_choice -eq 1) {
            #Get groups in current site
            Write-Host "`n"
            Get-PnPSiteGroup | Format-Table
        }

        if ($recon_user_choice -eq 2) {
            #List all users in current site
            Write-Host "`n"
            Get-PnPUser | Format-Table
        }

        if ($recon_user_choice -eq 3) {
            #Get users in current site with rights assigned
            Write-Host "`n"
            Get-PnPUser -WithRightsAssigned | Format-Table
        }

        if ($recon_user_choice -eq 4) {
            #Get users in current site with rights assigned
            Write-Host "`nSearching recursively to find all folders ..." @fg_yellow
            Write-Host "Note: Search results can sometimes be too large. The output will be saved to file as 'Sharepoint_Folder_Search_Report' in the /Outputs directory" @fg_gray
            $current_time = Get-Date -Format "dd_MM_dd_yyyy_HH_mm"
            Get-PnPFolderItem -FolderSiteRelativeUrl "/" -ItemType Folder -Recursive  | Out-File -FilePath .\Outputs\SharePoint_Folder_Search_Report_$current_time.txt
        }

        if ($recon_user_choice -eq 5) {
            #Find a file
            #Find all files
            while ($true) {
                $keyword = Read-Host -Prompt "Enter a keyword to search files matching it (Eg: secret)"
                
                if ($keyword -eq "") {
                    Write-Host "`nSorry search term cannot be blank. I am sure you can think of a interesting file you would like to look for. Here's one to help - try 'secret'`n"
                }

                if ($keyword -eq "" -or $keyword -eq "exit") {
                    Write-Host "`nExiting file search!`n"
                    break
                }

                if ($keyword -ne ""){
                    #Searching for file
                    Write-Host "`nSearching files matching keyword: $keyword" @fg_yellow
                    Write-Host "Note: Search results can sometimes be large. The results will be saved in the /Outputs directory" @fg_gray
                    $current_time = Get-Date -Format "dd_MM_dd_yyyy_HH_mm"
                    Find-PnPFile -Match *$keyword* | Out-File -FilePath .\Outputs\SharePoint_File_Search_Report_$current_time.txt
                    Write-Host "Note: You can type 'exit' to go back to previous menu" @fg_gray
                }
                
            }

        }

        if ($recon_user_choice -eq 6) {
            #Create a download folder
            if ((Test-Path -Path ".\Outputs\SharepointDump\$sharepoint_site_name") -eq $false){
                Write-Host "`nCreating directory 'SharePointDump\$sharepoint_site_name' in current local working path to dump all files...`n" @fg_yellow
                New-Item -ItemType Directory -Force -Path .\Outputs\SharepointDump\$sharepoint_site_name | Out-Null
            }

            #Check user preference
            Write-Host "`nNote: You can choose to download all files of a specific type such as 'docx' 'pdf' 'DWG'" @fg_gray
            $user_file_pref = Read-Host -Prompt "Enter the specific file extension -OR- leave blank and hit 'Enter' if you would like to dump all files from the site"

            Write-Host "`nInitiating file dump from Sharepoint site: $sharepoint_site ..." @fg_yellow @bg_black
            
            Write-Host "`nTraversing through site to find all files in the site ..." 
            if ($user_file_pref -eq $null -or $user_file_pref -eq ""){
                $all_files = Find-PnPFile -Match *
            }
            else {
                $all_files = Find-PnPFile -Match *.$user_file_pref
            }

            Write-Host "Found $($all_files.Length) files in the site`n"
            Write-Host "Preparing to dump all found files to local directory..."
            Write-Host "Resolving relative download paths for files..." @fg_gray
            Write-Host "Downloading files..." @fg_gray
            Write-Progress -Activity "Sharepoint file dump in progress" -Status "0% complete:" -PercentComplete 0;
            
            $counter = 0
            #Download all files
            foreach ($file in $all_files){ 
                $file_sp_path = $file.Path.Identity.Split(":")[-1] 
                Get-PnPFile -Url $file_sp_path -Path ./Outputs/SharepointDump/$sharepoint_site_name -AsFile -Filename $file_sp_path.Replace("/","_")
                $counter++
                Write-Progress -Activity "Sharepoint file dump in progress" -Status "$([math]::Round($counter/$all_files.Length * 100))% complete:" -PercentComplete ([math]::Round($counter/$all_files.Length * 100));
            }

            Write-Host "`nSharepoint site dump successful!!!" @fg_yellow
            Write-Host "Total files downloaded: $counter/$($all_files.Length)"  @fg_yellow
            #$download_size = “{0:N2}” -f ((Get-ChildItem -path ".\SharepointDump\$sharepoint_site_name" -recurse | Measure-Object -property length -sum ).sum /1MB) + ” MB”
            Write-Host "Total data downloaded from site: $download_size"  @fg_yellow
        }
    } while($recon_user_choice -ne 0)
}